<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="PN8QZ-8DUgiFf4{xqcqM">index22</variable><variable id="pTn%q]7xSMD3HO/wP8sC">strip</variable></variables><block type="pxt-on-start" id="{o*!GMG[^c/x88-3!BLE" x="88" y="0"><statement name="HANDLER"><block type="variables_set" id="#2:JH{f6l8fF?#e`{4:I"><field name="VAR" id="pTn%q]7xSMD3HO/wP8sC">strip</field><value name="VALUE"><shadow xmlns="http://www.w3.org/1999/xhtml" type="math_number"><field name="NUM">0</field></shadow><block type="neopixel_create" id="mRxp,?6||F?Syyl];iXy"><field name="pin">DigitalPin.P0</field><field name="mode">NeoPixelMode.RGB</field><value name="numleds"><shadow type="math_number" id="aJc)28wJj@XxZ#H2ma.."><field name="NUM">24</field></shadow><block type="christmastree_pickColorWheel" id=";3+@?ff-|{.Q_b^;iStz"><value name="color"><shadow type="colorWheelPicker" id="Wv@pT87RG(EFmkgYzPx9"><field name="value">0</field></shadow></value></block></value></block></value><next><block type="typescript_statement" id="hUhl,MA+wp|qD:,`N}!g" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum LEDMode {" line1="        //% block=&quot;Rainbow Mode&quot;" line2="        Rainbow = 0," line3="        //% block=&quot;Equalizer Mode&quot;" line4="        Equalizer = 1," line5="        //% block=&quot;Breath Mode&quot;" line6="        Breath = 2," line7="        //% block=&quot;Rise Mode&quot;" line8="        Rise = 3," line9="        //% block=&quot;Free Mode&quot;" line10="        Free = 4" line11="}" numlines="12"></mutation><next><block type="typescript_statement" id="ic|sTeL,hFNz5-_b+zr7" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Level {" line1="        //% block=&quot;Level 1&quot;" line2="        Level_1 = 0," line3="        //% block=&quot;Level 2&quot;" line4="        Level_2 = 1," line5="        //% block=&quot;Level 3&quot;" line6="        Level_3 = 2," line7="        //% block=&quot;Level 4&quot;" line8="        Level_4 = 3," line9="        //% block=&quot;Level 5&quot;" line10="        Level_5 = 4," line11="        //% block=&quot;Level 6&quot;" line12="        Level_6 = 5," line13="        //% block=&quot;Level 7&quot;" line14="        Level_7 = 6," line15="        //% block=&quot;Level 6&quot;" line16="        Level_8 = 7," line17="        //% block=&quot;Level 9&quot;" line18="        Level_9 = 8," line19="        //% block=&quot;Level 10&quot;" line20="        Level_10 = 9," line21="        //% block=&quot;Level 11&quot;" line22="        Level_11 = 10," line23="        //% block=&quot;Level 12&quot;" line24="        Level_12 = 11," line25="        //% block=&quot;Level 13&quot;" line26="        Level_13 = 12," line27="        //% block=&quot;Level 14&quot;" line28="        Level_14 = 13," line29="        //% block=&quot;Level 15&quot;" line30="        Level_15 = 14," line31="        //% block=&quot;Level 16&quot;" line32="        Level_16 = 15," line33="        //% block=&quot;Level 17&quot;" line34="        Level_17 = 16," line35="        //% block=&quot;Level 18&quot;" line36="        Level_18 = 17," line37="        //% block=&quot;Level 19&quot;" line38="        Level_19 = 18" line39="}" numlines="40"></mutation><next><block type="typescript_statement" id="L[P/;sy{.]VnuPPl]f~B" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ChristmasTree {" line1="    /**" line2="     * A ChristmasTree tree" line3="     */" line4="    export class ChristmasTree {" line5="        mode:LEDMode;" line6="        strip: neopixel.Strip;" line7="        numOfLEDs:number;" line8="        totalNumLeds:number;" line9="        numOfLEDPerPillar:number;" line10="        " line11="        private _colorStep:number;" line12="" line13="        private _lastMicVal:number;" line14="        private _colorOffset:number;" line15="" line16="        rainbowSpeed:number;" line17="        private _isSetupRainbow:boolean;" line18="        " line19="        " line20="        private _breathT:number;" line21="        private _breathDir:number;" line22="        private _breathColorOffset:number;" line23="" line24="        private _riseDuration:number;" line25="        private _riseState:number[];" line26="        private _riseColor:number[];" line27="        " line28="" line29="        public updateVars():void{" line30="            this._colorStep = 360/this.numOfLEDPerPillar;" line31="            this._colorOffset = 0;" line32="            this._lastMicVal = -1;" line33="            this._breathT = 0;" line34="            this._breathDir = 1;" line35="            this._breathColorOffset = 0;" line36="" line37="            this._riseState = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]" line38="            this._riseColor = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]" line39="            this._riseDuration = 3;" line40="" line41="        }" line42="" line43="" line44="" line45="        /**" line46="         * Clear strip led color" line47="         */" line48="        //% blockId=&quot;christmastree_clearStrip&quot; block=&quot;%tree clear led color&quot;" line49="        //% tree.defl=tree" line50="        //% weight=90 blockGap=8" line51="        //% parts=&quot;christmastree&quot;" line52="        public clearStrip():void{" line53="            this.strip.clear();" line54="        }" line55="" line56="        /**" line57="         * Show strip led color" line58="         */" line59="        //% blockId=&quot;christmastree_showStrip&quot; block=&quot;%tree show led color&quot;" line60="        //% tree.defl=tree" line61="        //% weight=90 blockGap=8" line62="        //% parts=&quot;christmastree&quot;" line63="        public showStrip():void{" line64="            this.strip.show();" line65="        }" line66="" line67="        /**" line68="         * Shows a rainbow pattern on all LEDs." line69="         * @param startHue the start hue value for the rainbow, eg: 1" line70="         * @param endHue the end hue value for the rainbow, eg: 360" line71="         */" line72="        //% blockId=&quot;christmastree_changeMode&quot; block=&quot;%tree|change mode to %mode&quot;" line73="        //% tree.defl=tree" line74="        //% weight=85 blockGap=8" line75="        //% parts=&quot;christmastree&quot;" line76="        public changeMode(m:LEDMode):void{" line77="            this._isSetupRainbow = false;" line78="            this.mode = m;" line79="        }" line80="" line81="        /**" line82="         * Shows a rainbow pattern on all LEDs." line83="         * @param startHue the start hue value for the rainbow, eg: 1" line84="         * @param endHue the end hue value for the rainbow, eg: 360" line85="         */" line86="        //% blockId=&quot;christmastree_rotatePixelColor&quot; block=&quot;%tree|move pixel by %mode|pixel&quot;" line87="        //% tree.defl=tree" line88="        //% weight=85 blockGap=8" line89="        //% parts=&quot;christmastree&quot;" line90="        public rotatePixelColor(speed:number):void{" line91="            this.rainbowSpeed = speed;" line92="            if(this.rainbowSpeed &gt; 5 ){" line93="                this.rainbowSpeed = 5;" line94="            }" line95="            if(this.rainbowSpeed &lt; -5 ){" line96="                this.rainbowSpeed = -5;" line97="            }" line98="            this.strip.rotate(this.rainbowSpeed);" line99="        }" line100="" line101="        /**" line102="         * Play next animation" line103="         */" line104="        //% blockId=&quot;christmastree_nextMode&quot; block=&quot;%tree play next mode&quot;" line105="        //% tree.defl=tree" line106="        //% weight=90 blockGap=8" line107="        //% parts=&quot;christmastree&quot;" line108="        public nextMode():void{" line109="            this._isSetupRainbow = false;" line110="            this.mode += 1;" line111="            if(this.mode&gt;=4){" line112="                this.mode = 0;" line113="            }" line114="        }" line115="" line116="        /**" line117="         * Play previous animation" line118="         */" line119="        //% blockId=&quot;christmastree_previousMode&quot; block=&quot;%tree play previous mode&quot;" line120="        //% tree.defl=tree" line121="        //% weight=90 blockGap=8" line122="        //% parts=&quot;christmastree&quot;" line123="        public previousMode():void{" line124="            this._isSetupRainbow = false;" line125="            this.mode -= 1;" line126="            if(this.mode&lt;=0){" line127="                this.mode = 3;" line128="            }" line129="        }" line130="" line131="        /**" line132="         * Update animation" line133="         */" line134="        //% blockId=&quot;christmastree_update&quot; block=&quot;%tree update lighting animation&quot;" line135="        //% tree.defl=tree" line136="        //% weight=90 blockGap=8" line137="        //% parts=&quot;christmastree&quot;" line138="        public update():void{" line139="            if(this.mode==0){" line140="                this.rainbowAnimation(this.rainbowSpeed);" line141="                this.showStrip();" line142="                basic.pause(100);" line143="            }else if(this.mode==1){" line144="                let mic = 128" line145="                try{" line146="                    mic = input.soundLevel()" line147="                }catch(err){" line148="                    mic = 128" line149="                }" line150="                this.equalizerAnimation(mic);" line151="                this.showStrip();" line152="                basic.pause(1);" line153="            }else if(this.mode==2){" line154="                this.breathAnimation();" line155="                this.showStrip();" line156="            }else if(this.mode==3){" line157="                let mic2 = 128" line158="                try{" line159="                    mic2 = input.soundLevel()" line160="                }catch(err2){" line161="                    mic2 = 128" line162="                }" line163="                this.riseAnimation(mic2, 100)" line164="                this.showStrip();" line165="            }else{" line166="                this.showStrip();" line167="            }" line168="            this._colorOffset+=1;" line169="            this._breathColorOffset+=1;" line170="            this._breathT+=1;" line171="" line172="            if(this._colorOffset&gt;360){" line173="                this._colorOffset = 0;" line174="            }" line175="            if(this._breathT&gt;100){" line176="                this._breathT = 1;" line177="            }" line178="        }" line179="" line180="        /**" line181="         * Set leds strip to rainbow pattern." line182="         */" line183="        //% blockId=&quot;christmastree_showRainbow&quot; block=&quot;%tree|set to rainbow pattern&quot;" line184="        //% tree.defl=tree" line185="        //% weight=85 blockGap=8" line186="        //% parts=&quot;christmastree&quot;" line187="        public showRainbow():void{" line188="            this.strip.showRainbow();" line189="        }" line190="" line191="        /**" line192="         * Play rainbow animation" line193="         */" line194="        //% blockId=&quot;christmastree_rainbowAnimation&quot; block=&quot;%tree play rainbow animation width speed%speed&quot;" line195="        //% tree.defl=tree" line196="        //% weight=90 blockGap=8" line197="        //% parts=&quot;christmastree&quot;" line198="        public rainbowAnimation(speed:number):void{" line199="            this.rainbowSpeed = speed;" line200="            if(this._isSetupRainbow == false || this._isSetupRainbow == null){" line201="                this._isSetupRainbow = true;" line202="                this.strip.clear()" line203="                this.strip.showRainbow(1, 360)" line204="            }" line205="            this.rotatePixelColor(this.rainbowSpeed)" line206="        }" line207="" line208="" line209="        /**" line210="         * Play equalizer animation" line211="         */" line212="        //% blockId=&quot;christmastree_equalizerAnimation&quot; block=&quot;%tree play equalizer animation with sound level%value&quot;" line213="        //% tree.defl=tree" line214="        //% weight=90 blockGap=8" line215="        //% parts=&quot;christmastree&quot;" line216="        public equalizerAnimation(micVal:number):void{" line217="            if(this._lastMicVal!=-1){" line218="                if(micVal &lt; this._lastMicVal){" line219="                    micVal = micVal + ((this._lastMicVal - micVal) * 0.2)" line220="                }else{" line221="                    micVal = this._lastMicVal + ((micVal - this._lastMicVal) * 0.95)" line222="                }" line223="            }" line224="            this._lastMicVal = micVal;" line225="            let anchor:number = micVal / 100 * this.numOfLEDPerPillar" line226="            " line227="            this.strip.clear()" line228="            for (let idx = 0; idx &lt;= this.numOfLEDPerPillar; idx++) {" line229="                let _color = idx * this._colorStep + this._colorOffset % 360" line230="                if (idx &lt;= anchor) {" line231="                    this.setLevelColor(idx, this.makeColor(_color, 100, 50))" line232="                } else {" line233="                    let _saturation:number = (45 - 5) * ((this.numOfLEDPerPillar - idx) / (this.numOfLEDPerPillar - anchor)) * 0.6" line234="                    let _brightness:number = (100 - 40) * ((this.numOfLEDPerPillar - idx) / (this.numOfLEDPerPillar - anchor)) * 1" line235="                    if (_saturation &lt; 5) {" line236="                        _saturation = 5" line237="                    }" line238="                    this.setLevelColor(idx, this.makeColor(_color, _saturation, _brightness))" line239="                }" line240="            }" line241="        }" line242="" line243="        /**" line244="         * Play breath animation" line245="         */" line246="        //% blockId=&quot;christmastree_breathAnimation&quot; block=&quot;%tree play breath animation&quot;" line247="        //% tree.defl=tree" line248="        //% weight=90 blockGap=8" line249="        //% parts=&quot;christmastree&quot;" line250="        public breathAnimation () {" line251="            if (this._breathT % 100 == 0) {" line252="                this._breathDir *= -1;" line253="            }" line254="            let breathB = 0;" line255="            if (this._breathDir == 1) {" line256="                breathB = this.easeInOutQuad(this._breathT % 100, 0, 100, 100)" line257="            } else {" line258="                breathB = 100 - this.easeInOutQuad(this._breathT % 100, 0, 100, 100)" line259="            }" line260="" line261="            this.strip.clear()" line262="            for (let index = 0; index &lt; this.numOfLEDPerPillar; index++) {" line263="                let color = this.makeColor((this._breathColorOffset / 7 + (60 / this.numOfLEDPerPillar * index)) % 360, 100, breathB * 0.45 + 5)" line264="                this.setLevelColor(index, color)" line265="            }" line266="            " line267="        }" line268="" line269="        /**" line270="         * Play rise animation" line271="         */" line272="        //% blockId=&quot;christmastree_riseAnimation&quot; block=&quot;%tree play rise animation with sound level%micVale and trigger threshold%threshold&quot;" line273="        //% tree.defl=tree" line274="        //% weight=90 blockGap=8" line275="        //% parts=&quot;christmastree&quot;" line276="        public riseAnimation(micVal:Number, threshold:Number):void{" line277="            let _duration = 3" line278="            if (micVal &gt; threshold) {" line279="                this.triggerRise(_duration)" line280="            }" line281="            this.moveRise()" line282="        }" line283="" line284="        " line285="" line286="        /**" line287="         * Trigger rise led effect" line288="         */" line289="        //% blockId=&quot;christmastree_triggerRiseWithColor&quot; block=&quot;%tree trigger rise led effect with %duration|duration and %color|color&quot;" line290="        //% tree.defl=tree" line291="        //% weight=90 blockGap=8" line292="        //% parts=&quot;christmastree&quot;" line293="        public triggerRiseWithColor(duration:number, color:number):void{" line294="            this._riseDuration = duration" line295="            let _duration2 = this._riseDuration" line296="            this._riseState[0] = this._riseState[1] = _duration2" line297="            this._riseColor[0] = this._riseColor[1] = this.makeColor(color, 100, 50)" line298="        }" line299="        " line300="" line301="        /**" line302="         * Trigger rise led effect" line303="         */" line304="        //% blockId=&quot;christmastree_triggerRise&quot; block=&quot;%tree trigger rise led effect with %duration|duration&quot;" line305="        //% tree.defl=tree" line306="        //% weight=90 blockGap=8" line307="        //% parts=&quot;christmastree&quot;" line308="        public triggerRise(duration:number):void{" line309="            this._riseDuration = duration" line310="            let _duration3 = this._riseDuration" line311="            this._riseState[0] = this._riseState[1] = _duration3" line312="            this._riseColor[0] = this._riseColor[1] = this.makeColor(Math.random() * 360, 100, 50)" line313="        }" line314="        " line315="        /**" line316="         * Move rise led move upward" line317="         */" line318="        //% blockId=&quot;christmastree_moveRise&quot; block=&quot;%tree move rise led upward&quot;" line319="        //% tree.defl=tree" line320="        //% weight=90 blockGap=8" line321="        //% parts=&quot;christmastree&quot;" line322="        public moveRise():void{" line323="            let _duration4 = this._riseDuration" line324="            this.strip.clear()" line325="" line326="            for (let level = 0; level &lt; this.numOfLEDPerPillar; level++) {" line327="                if(this._riseState[level] &gt; 0){" line328="                    this.setLevelColor(level, this._riseColor[level])" line329="                    this._riseState[level] -= 1;" line330="                    if(this._riseState[level]==0 &amp;&amp; level + 1 &lt; this.numOfLEDPerPillar){" line331="                        this._riseState[level+1] = _duration4 + 1;" line332="                        this._riseColor[level+1] = this._riseColor[level]" line333="                    }" line334="                }else{" line335="                    this.setLevelColor(level, this.makeColor(30, 25, 10))" line336="                }" line337="            }" line338="        }" line339="" line340="        private makeColor(color:number, saturation:number, brightness:number):number{" line341="            return neopixel.hsl(color, saturation, brightness)" line342="        }" line343="" line344="        /**" line345="         * Set christmas tree color" line346="         */" line347="        //% blockId=&quot;christmastree_setTreeColor&quot; block=&quot;%tree set christmas tree led color to %color=neopixel_colors&quot;" line348="        //% tree.defl=tree" line349="        //% weight=90 blockGap=8" line350="        //% parts=&quot;christmastree&quot;" line351="        public setTreeColor(color:number):void{" line352="            for (let idx2 = 0; idx2 &lt;= 19; idx2++) {" line353="                this.setLevelColor(idx2, color)" line354="            }" line355="        }" line356="" line357="        /**" line358="         * Set christmas tree brightness" line359="         * value larger than 50 color will change to white" line360="         */" line361="        //% blockId=&quot;christmastree_setTreeColorAndBrightness&quot; block=&quot;%tree set christmas tree color to %color=christmastree_pickColorHue and led brightness to %brightness&quot;" line362="        //% tree.defl=tree" line363="        //% weight=90 blockGap=8" line364="        //% parts=&quot;christmastree&quot;" line365="        public setTreeColorAndBrightness(color:number, brightness:number):void{" line366="            for (let idx3 = 0; idx3 &lt;= 19; idx3++) {" line367="                this.setLevelColor(idx3, neopixel.hsl(color, 100, brightness))" line368="            }" line369="        }" line370="" line371="        " line372="" line373="        /**" line374="         * Set christmas tree brightness" line375="         * Set specfic level to different color and brightness" line376="         * (0 = level-1, 1 = level-2, etc...)" line377="         */" line378="        //% blockId=&quot;christmastree_setLevelColorAndBrightness&quot; block=&quot;%tree set level-%level=christmastree_levels color to %color=christmastree_pickColorHue and led brightness to %brightness&quot;" line379="        //% tree.defl=tree" line380="        //% weight=90 blockGap=8" line381="        //% parts=&quot;christmastree&quot;" line382="        public setLevelColorAndBrightness(level:number, color:number, brightness:number):void{" line383="            this.setLevelColor(level, neopixel.hsl(color, 100, brightness))" line384="        }" line385="" line386="        /**" line387="         * Set specfic level to different color " line388="         * (0 = level-1, 1 = level-2, etc...)" line389="         */" line390="        //% blockId=&quot;christmastree_setLevelColor&quot; block=&quot;%tree set level-%level=christmastree_levels led to %color=neopixel_colors&quot;" line391="        //% tree.defl=tree" line392="        //% weight=90 blockGap=8" line393="        //% parts=&quot;christmastree&quot;" line394="        public setLevelColor(level:number, color:number):void{" line395="            this.strip.setPixelColor(level, color)" line396="            this.strip.setPixelColor(39 - level, color)" line397="            this.strip.setPixelColor(level + 41, color)" line398="            this.strip.setPixelColor(81 - level, color)" line399="" line400="            if(level==this.numOfLEDPerPillar-1){" line401="                this.strip.setPixelColor(19, color)" line402="                this.strip.setPixelColor(20, color)" line403="                this.strip.setPixelColor(60, color)" line404="                this.strip.setPixelColor(61, color)" line405="                this.strip.setPixelColor(62, color)" line406="            }" line407="        }" line408="" line409="        /**" line410="         * Set pixel color " line411="         * (0 = index-1, 1 = index-2, etc...)" line412="         */" line413="        //% blockId=&quot;christmastree_setPixelColor&quot; block=&quot;%tree set pixel-%index led to %color=neopixel_colors&quot;" line414="        //% tree.defl=tree" line415="        //% weight=90 blockGap=8" line416="        //% parts=&quot;christmastree&quot;" line417="        public setPixelColor(index:number, color:number):void{" line418="            this.strip.setPixelColor(index, color)" line419="        }" line420="" line421="        public easeInOutQuad (_percent: number, _elapsed: number, _start: number, _end: number) {" line422="            _percent /= _end/2;" line423="            " line424="            if (_percent &lt; 1) {" line425="                return _start / 2 * _percent * _percent + _elapsed" line426="            }" line427="            _percent += -1" line428="            return (0 - _start) / 2 * (_percent * (_percent - 2) - 1) + _elapsed" line429="        }" line430="    }   " line431="   /**" line432="     * Create a new Christmas Tree controller." line433="     * @param mode the default mode where the Christmas tree default setting." line434="     */" line435="    //% blockId=&quot;christmastree_create&quot; block=&quot;Create christmas tree&quot;" line436="    //% weight=90 blockGap=8" line437="    //% parts=&quot;christmastree&quot;" line438="    //% trackArgs=0,1" line439="    //% blockSetVariable=tree" line440="    export function create(): ChristmasTree {" line441="        let tree = new ChristmasTree();" line442="        tree.mode = LEDMode.Rainbow;" line443="        tree.numOfLEDPerPillar = 19;" line444="        tree.totalNumLeds = 81;" line445="        tree.strip = neopixel.create(DigitalPin.P2, tree.totalNumLeds, NeoPixelMode.RGB);" line446="        tree.rainbowSpeed = 1;" line447="" line448="        tree.updateVars();" line449="        return tree;" line450="    }" line451="" line452="    /**" line453="     * Gets the level value of a known levels" line454="    */" line455="    //% weight=2 blockGap=8" line456="    //% blockId=&quot;christmastree_levels&quot; block=&quot;%level&quot;" line457="    //% advanced=true" line458="    export function levels(_level: Level): number {" line459="        return _level;" line460="    }" line461="" line462="    /**" line463="     * Gets color" line464="    */" line465="    //% weight=2 blockGap=8" line466="    //% blockId=&quot;christmastree_pickColors&quot; block=&quot;Color $color&quot;" line467="    //% color.shadow=&quot;colorWheelHsvPicker&quot;" line468="    export function color(color: number): number {" line469="        return neopixel.hsl( color/255*360 , 100, 50);" line470="    }" line471="" line472="    /**" line473="     * Gets color hue" line474="    */" line475="    //% weight=2 blockGap=8" line476="    //% blockId=&quot;christmastree_pickColorHue&quot; block=&quot;Hue $color&quot;" line477="    //% color.shadow=&quot;colorWheelHsvPicker&quot;" line478="    export function hue(color: number): number {" line479="        return (color%255)/255 * 360;" line480="    }" line481="" line482="    /**" line483="     * Gets color wheel" line484="    */" line485="    //% weight=2 blockGap=8" line486="    //% blockId=&quot;christmastree_pickColorWheel&quot; block=&quot;WheelColor $color&quot;" line487="    //% color.shadow=&quot;colorWheelPicker&quot;" line488="    export function wheelColor(color: number): number {" line489="       " line490="        class rgb {" line491="            public r: number;" line492="            public g: number;" line493="            public b: number;" line494="            constructor(r?: number, g?: number, b?: number){" line495="                this.r = r;" line496="                this.g = g;" line497="                this.b = b;" line498="            }" line499="        }" line500="        " line501="        let colorWheel = [" line502="            new rgb(0, 255, 255)," line503="            new rgb(60, 195, 255)," line504="            new rgb(120, 135, 255)," line505="            new rgb(180, 75, 255)," line506="            new rgb(240, 15, 255)," line507="            new rgb(255, 45, 210)," line508="            new rgb(255, 105, 150)," line509="            new rgb(255, 165, 90)," line510="            new rgb(255, 225, 30)," line511="            new rgb(225, 255, 30)," line512="            new rgb(165, 255, 90)," line513="            new rgb(105, 255, 150)," line514="            new rgb(45, 255, 210)" line515="        ];" line516="" line517="&#9;&#9;let lerp = function  (start:number, end:number, amt:number):number{" line518="&#9;&#9;  return (1-amt)*start+amt*end" line519="&#9;&#9;}" line520="&#9;&#9;let getTween = function (b:number, e:number, i:number):number {" line521="&#9;&#9;&#9;return b + ((i/99) * (e-b));" line522="&#9;&#9;}" line523="&#9;&#9;color = color &gt;&gt; 0;" line524="&#9;&#9;let _percent = color / 256" line525="&#9;&#9;let b_index = Math.floor(_percent*colorWheel.length);" line526="&#9;&#9;let e_index = b_index + 1;" line527="&#9;&#9;e_index = (e_index&gt;colorWheel.length-1)?colorWheel.length-1:e_index" line528="&#9;&#9;" line529="&#9;&#9;let start = new rgb(colorWheel[b_index].r, colorWheel[b_index].g, colorWheel[b_index].b )" line530="&#9;&#9;let end = new rgb(colorWheel[e_index].r, colorWheel[e_index].g, colorWheel[e_index].b )" line531="&#9;&#9;let u = _percent * colorWheel.length - 1." line532="&#9;&#9;u =  u - Math.floor(u);" line533="" line534="&#9;&#9;let r = Math.round(lerp(start.r, end.r, u));" line535="&#9;&#9;let g = Math.round(lerp(start.g, end.g, u));" line536="&#9;&#9;let b = Math.round(lerp(start.b, end.b, u));" line537="&#9;&#9;let colorname = 'rgb(' + r + ',' + g + ',' + b + ')';&#9;&#9;" line538="" line539="        return neopixel.rgb(r,g,b);" line540="    }" line541="&#9;" line542="&#9;" line543="&#9;" line544="}" numlines="545"></mutation></block></next></block></next></block></next></block></statement></block><block type="christmastree_pickColors" id="4tL2WzkEG,$-Q;UQB^!B" disabled="true" x="0" y="2007"><value name="color"><shadow type="colorWheelHsvPicker" id="9)bWzervZr9yo-#!s7$l"><field name="value">10</field></shadow></value></block><block type="math_arithmetic" id="E`VJZo5y$uOC@pZ$U]@=" disabled="true" x="3229" y="5338"><field name="OP">MINUS</field><value name="A"><shadow type="math_number" id="cLUD)eOlKO|PLt{!4hzi"><field name="NUM">39</field></shadow></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="I{)YwKy`Uq`HI^i[5H^_"><field name="VAR" id="PN8QZ-8DUgiFf4{xqcqM">index22</field></block></value></block></xml>